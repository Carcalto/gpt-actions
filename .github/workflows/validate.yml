name: New Action Validation
on:
  issues:
    types: [opened, edited]
jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get issue labels
        id: issue_labels
        uses: actions/github-script@v5
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            return issue.data.labels.map(label => label.name).join(',');
      - name: Validate Action
        uses: ./.github/actions/validate
        with:
          issue_number: ${{ github.event.issue.number }}
          issue_body: ${{ github.event.issue.body }}
          issue_labels: ${{ steps.issue_labels.outputs.result }}
        id: validate
      - name: Update Issue
        uses: actions/github-script@v5
        with:
          script: |
            if (`${{ steps.validate.outputs.issue_labels }}`.split(',').includes('new-schema')) {
              github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `${{ steps.validate.outputs.issue_body }}`.replace(/%60/g, '`'),
                labels: `${{ steps.validate.outputs.issue_labels }}`.split(',')
              });
            }
      - name: Post Comment
        uses: actions/github-script@v5
        with:
          script: |
            if (`${{ steps.validate.outputs.issue_comment }}`.replace(/%60/g, '`') !==  '') {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `${{ steps.validate.outputs.issue_comment }}`.replace(/%60/g, '`')
              });
            }